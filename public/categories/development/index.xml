<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on bradorego.com</title>
    <link>https://bradorego.com/categories/development/</link>
    <description>Recent content in Development on bradorego.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 May 2016 18:29:53 -0500</lastBuildDate>
    <atom:link href="https://bradorego.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Better MCBW</title>
      <link>https://bradorego.com/2016-05-better-mcbw</link>
      <pubDate>Mon, 02 May 2016 18:29:53 -0500</pubDate>
      
      <guid>https://bradorego.com/2016-05-better-mcbw</guid>
      <description>

&lt;p&gt;&lt;div class=&#34;tldnr&#34;&gt;
  &lt;h4&gt;TL;DNR&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://ionicframework.com&#34;&gt;Ionic&lt;/a&gt; lets you build apps ridiculously fast. Write once, build many.&lt;/li&gt;
    &lt;li&gt;If you don&amp;rsquo;t like how something&amp;rsquo;s done, instead of just complaining about it, do something to make it better.&lt;/li&gt;
    &lt;li&gt;Reverse engineering is easier than ever. Your success is not a factor of your codebase, but about the value you offer an end-user.&lt;/li&gt;
    &lt;li&gt;The end result: &lt;a href=&#34;http://mcbw.herokuapp.com&#34;&gt;Better MCBW&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;hr/&gt;&lt;/p&gt;

&lt;h1 id=&#34;backstory:608891990651e25035713577174171c1&#34;&gt;Backstory&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://madbeerweek.com&#34;&gt;Madison Craft Beer Week&lt;/a&gt; has been one of my favorite events since moving to Madison. Started as a grassroots project by a few local beer lovers, the event has ballooned to one of the best in the nation, featuring over 550 events this year. In years past, I&amp;rsquo;ve been involved in helping out on the tech side of things, and we had big plans for this upcoming year. But in September 2015, The Isthmus &lt;a href=&#34;http://isthmus.com/food-drink/beer/isthmus-acquires-madison-craft-beer-week/&#34;&gt;acquired Craft Beer Week&lt;/a&gt;, and took over all operations.&lt;/p&gt;

&lt;p&gt;After hearing that the 2016 was &lt;a href=&#34;https://www.facebook.com/MadBeerWeek/posts/1225581240785685&#34;&gt;built natively&lt;/a&gt;, and as an Android user I would have to wait to get my hands on it, questions arose as to why such a technically/mechanically simple app wasn&amp;rsquo;t built using &lt;a href=&#34;http://ionicframework.com&#34;&gt;Ionic&lt;/a&gt;, a mobile app development framework built by a company based in Madison. After I got my hands on the Android app itself, I was less than enthusiastic about its performance and feature set.&lt;/p&gt;

&lt;h1 id=&#34;reverse-engineering-it:608891990651e25035713577174171c1&#34;&gt;Reverse Engineering It&lt;/h1&gt;

&lt;p&gt;So, realizing that my complaints weren&amp;rsquo;t getting anyone anywhere (not to mention I lacked the necessary context to know why they made the decisions they made), I had an idea: I have the APK, so I can decompile it, dig through it, and figure out exactly what API calls they&amp;rsquo;re making, and then emulate them with my own codebase. Simple enough, right? Well, for someone that knows virtually nothing about native Android development, this task proved simple yet pointless. I only gained one insight from it, which was the URL of their API. Then another idea hit me: why not just set up a proxy and read the HTTP requests?&lt;/p&gt;

&lt;h3 id=&#34;enter-mitmproxy:608891990651e25035713577174171c1&#34;&gt;Enter &lt;code&gt;mitmproxy&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;After doing a little bit of googling, I came across this &lt;a href=&#34;https://medium.com/@rotxed/how-to-debug-http-s-traffic-on-android-7fbe5d2a34#.mhbido9ys&#34;&gt;incredibly helpful article&lt;/a&gt; explaining step-by-step exactly what I wanted to do. Next thing I know, I had a proxy running on my laptop, my phone&amp;rsquo;s internet traffic streaming through that proxy, and I had access to every HTTP request the phone (and thus, the app) made. It was almost too easy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bradorego.com/img/case-study/better-mcbw/mitmproxy.png&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-horror:608891990651e25035713577174171c1&#34;&gt;The Horror&lt;/h3&gt;

&lt;p&gt;So, now that I had all of the HTTP requests (all, uh, 4 of them that the app seemed to be making), all I had to do was make those same requests with the same body, parse the response, and I was off to the races, right? This is all true, but in my inspection of the traffic, I came across a few horrifying realizations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Every request made was a &lt;code&gt;POST&lt;/code&gt;. Getting the list of events? &lt;code&gt;POST&lt;/code&gt;. Creating an account? &lt;code&gt;POST&lt;/code&gt;. Logging in, and creating a session? &lt;code&gt;POST&lt;/code&gt;. Getting a list of special offers? &lt;code&gt;POST&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Every response had a status of &lt;code&gt;200 - OK&lt;/code&gt;. If there was an error, you have to parse the body of the message. And those bodies are in no way consistent.&lt;/li&gt;
&lt;li&gt;The list of events (~580 json objects) came out to a staggering 700KB of data. Not the end of the world in today&amp;rsquo;s day and age, but a tough pill to swallow. There&amp;rsquo;s gotta be something we can do about that, right? (Spoiler alert: there is).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Interacting with this API was painful. I was literally parsing a tilde(~) delimited string to determine the result of actions, and then picking parts of that out to save (e.g. the access token). This kind of feels like somebody&amp;rsquo;s first attempt at making an API.&lt;/p&gt;

&lt;h3 id=&#34;off-to-the-races:608891990651e25035713577174171c1&#34;&gt;Off to the Races&lt;/h3&gt;

&lt;p&gt;All of that aside, I thought I was in the clear. Build an Ionic app, replicate the responses, do some other stuff with the data. Simple enough, right? Aaaaand then I got &lt;code&gt;CORS&lt;/code&gt;&amp;rsquo;d, which I should&amp;rsquo;ve seen coming. After trying to find a way to get Angular to work around pre-flighting requests, I decided to bite the bullet and build a node proxy. ~100 lines of &lt;code&gt;Node.js&lt;/code&gt;/&lt;code&gt;Express&lt;/code&gt; code later, I was in business. Now we can send our requests to our own server which would make the same requests to the Craft Beer Week API and pass the results back.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;app.post(&#39;*&#39;, function (req, res, next) {
  console.log(&amp;quot;requesting &amp;quot; + API_URL + req.originalUrl);
  request.post(API_URL + req.originalUrl, {form: req.body},
    function (error, response, body) {
      if (body.indexOf(&#39;Your session&#39;) !== -1) {
        res.status(401);
        return res.send(body);
      }
      console.log(response.statusCode + &amp;quot; - &amp;quot; + response.statusMessage);
      res.status(response.statusCode);
      res.send(body);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;feature-parity:608891990651e25035713577174171c1&#34;&gt;Feature Parity&lt;/h3&gt;

&lt;p&gt;With all of that behind us, all we needed was to do was create the Ionic app to do what the native app did. Considering the native app is just a list of events, that was pretty straightforward. As part of this process, I&amp;rsquo;d spun up a little &lt;a href=&#34;http://firebase.com&#34;&gt;Firebase database&lt;/a&gt; to save my own version of user accounts (which I was still creating via the MCBW API). Further inspection of the app&amp;rsquo;s &amp;ldquo;save&amp;rdquo; feature revealed a lack of persistence of those events (it was only saving it on the device), so in trying to replicate features I was actually already improving the experience.&lt;/p&gt;

&lt;p&gt;The rest, as they say, is history (or, at least, trivial).&lt;/p&gt;

&lt;h3 id=&#34;deploying-to-heroku:608891990651e25035713577174171c1&#34;&gt;Deploying to Heroku&lt;/h3&gt;

&lt;p&gt;Having a feature-parity Ionic app on your local machine is great and all, but it doesn&amp;rsquo;t do much good. Enter &lt;a href=&#34;http://blog.ionic.io/heroku-ionic/&#34;&gt;Ionic Heroku&lt;/a&gt;, which is a nifty little boilerplate that takes care of all of the setup and deploy configuration Heroku needs. You can hit one button, punch in a name, and you have a Heroku app. Copy your www/ file into the boilerplate&amp;rsquo;s (and update any npm/bower/ionic config you need to) and you&amp;rsquo;re golden. This was possibly the easiest step in the process.&lt;/p&gt;

&lt;h1 id=&#34;making-it-better:608891990651e25035713577174171c1&#34;&gt;Making It Better&lt;/h1&gt;

&lt;p&gt;At this point, I&amp;rsquo;d spent about 8 hours including all development time and research into how their API worked. I could&amp;rsquo;ve called it a day - I&amp;rsquo;d built an app that reached feature parity and could be deployed to Android and iOS. My work here was done. But, even by reaching parity, I hadn&amp;rsquo;t made anything better. At the end of the day, I was building this app for myself, so stopping here wouldn&amp;rsquo;t&amp;rsquo;ve helped. So, I set out with a short list of ways to improve the experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;700KB of JSON seemed like a bit much&lt;/li&gt;
&lt;li&gt;Date dividers would make scanning the list a lot easier&lt;/li&gt;
&lt;li&gt;Saving a list of events is one thing, being able to share that list is another&lt;/li&gt;
&lt;li&gt;Different ways of sorting (e.g. by location name, by event name)&lt;/li&gt;
&lt;li&gt;A map view would be clutch&lt;/li&gt;
&lt;li&gt;What if I got an email every morning with my saved events for the day?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;gzip-is-your-friend:608891990651e25035713577174171c1&#34;&gt;&lt;code&gt;gzip&lt;/code&gt; is your friend&lt;/h3&gt;

&lt;p&gt;Where do we start? What&amp;rsquo;re the low-hanging fruit? Let&amp;rsquo;s see what we can do about this JSON dump. As it turns out, the MCBW API wasn&amp;rsquo;t using any compression. Enabling &lt;code&gt;gzip&lt;/code&gt; on my Node server brought that 700 down to ~100, which is a huge improvement. Inspecting the data further, it seemed that all the data was there twice - as both an index and a keyed index. That lead to a horrific piece of code that looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  delete jsonBody[i][0];
  delete jsonBody[i][1];
  delete jsonBody[i][2];
  delete jsonBody[i][3];
  delete jsonBody[i][4];
  delete jsonBody[i][5];
  delete jsonBody[i][6];
  delete jsonBody[i][7];
  delete jsonBody[i][8];
  delete jsonBody[i][9];
  delete jsonBody[i][10];
  delete jsonBody[i][11];
  delete jsonBody[i][12];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which brought us down to 80KB. Still not great, but much better than 700KB. Okay, great, what&amp;rsquo;s next? Sharing seems like it&amp;rsquo;s pretty straightforward.&lt;/p&gt;

&lt;h3 id=&#34;enabling-sharing:608891990651e25035713577174171c1&#34;&gt;Enabling sharing&lt;/h3&gt;

&lt;p&gt;This isn&amp;rsquo;t going to be a lecture about how powerful social sharing plugins are in viral/organic growth. I&amp;rsquo;m less concerned about that and more concerned about the end-user experience. Consdering I already had my own Firebase database, enabling this was actually trivial. Create a route outside the context of the app (otherwise users would get redirected to login) that took in the user&amp;rsquo;s ID (from the URL) and pulled out the list of their saved events. Simple, straightforward, elegant. Add in a few social share buttons for convenience and the app practically markets itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bradorego.com/img/case-study/better-mcbw/sharing.png&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;dividers:608891990651e25035713577174171c1&#34;&gt;Dividers&lt;/h3&gt;

&lt;p&gt;Regardless of the content, a 500-item list is overwhemling. Adding date dividers at least makes it a little easier to scan through. The implementation of this is actually pretty straightforward. Here&amp;rsquo;s that snippet (for dates) in all its glory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  for (i = 0; i &amp;lt; events.length; i++) {
    if (events[i].type !== &amp;quot;divider&amp;quot;) { /// don&#39;t process dividers if we come across them
      tempDate = new Date(events[i].start_date);
      if (currentDate.getDate() !== tempDate.getDate()) { /// tempDate is a new date!
        currentDate = tempDate;
        events.splice(i, 0, {type: &amp;quot;divider&amp;quot;, value: dayDividerFormat(currentDate)});
        i--; /// backtrack so we don&#39;t miss something
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Couple this with &lt;code&gt;$ionInfiniteScroll&lt;/code&gt; and we have lazy-loading events 20 at a time plus dividers. Much better than spitting out a list of 500 events and having users fend for themselves.&lt;/p&gt;

&lt;h3 id=&#34;searching-sorting-maps:608891990651e25035713577174171c1&#34;&gt;Searching, Sorting, Maps&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://bradorego.com/img/case-study/better-mcbw/map.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s great and all, but what if I&amp;rsquo;m looking for a specific event? What if I&amp;rsquo;m in a particular part of town and I want to know what my other options are nearby? Sorting and Filtering were actually somewhat of a happy accident between what Angular offers and how I&amp;rsquo;d structured the rest of the app. When the user logs in, I fetch the list of events once and cache it. From there, pretty much everything they see is some permutation of that.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a fair amount of heavy-lifting on the client, but it also means I have all the source material and we&amp;rsquo;re minimizing the number of round-trips. I already have a mechanism for adding dividers, so if I want to enable other sorting (the Node server sorts by start date by default), all I needed to do was a simple Javascript &lt;code&gt;Array.sort()&lt;/code&gt; and then pass that into the divider function.&lt;/p&gt;

&lt;p&gt;Searching proved a little more complicated. Aforementioned lazy loading meant I couldn&amp;rsquo;t just use an Angular &lt;code&gt;$filter&lt;/code&gt; (without additional complications - I&amp;rsquo;m sure I could&amp;rsquo;ve), but that local cache made it fairly trivial. Here, &lt;code&gt;Array.filter()&lt;/code&gt; came to the rescue. A simple string compare (via the ever-popular &lt;code&gt;String.indexOf()&lt;/code&gt;) spat out the results we crave.&lt;/p&gt;

&lt;p&gt;Mapping proved a little more difficult. After wrestling with all of the available Angular Google Maps solutions, I settled on &lt;a href=&#34;https://ngmap.github.io/&#34;&gt;ngMap&lt;/a&gt;. It made the most sense to me from a structural standpoint, and made a lot of the subsequent code incredibly easy to write (think: virtually no controller code to place markers and pop up and info window on click). A little date finagling to make sure we&amp;rsquo;re showing the right pins, and a tiny insight into managing 500 events on a map (which is actually something I learned from last year&amp;rsquo;s MCBW website) and we&amp;rsquo;ve finally reached a point where I think I can say I&amp;rsquo;m done. Well, almost&amp;hellip;.&lt;/p&gt;

&lt;h3 id=&#34;checkin-da-emails:608891990651e25035713577174171c1&#34;&gt;Checkin&amp;rsquo; da Emails&lt;/h3&gt;

&lt;p&gt;This is a terrible example of staying lean (as opposed to most of the other development on this project, which was driven by me trying to use my own app out in the wild), but I had the idea of sending an email every morning with the list of events you&amp;rsquo;d saved for that day. Partly because, theoretically, that eliminates the need to ever check your to-do list again. Log on once, save the events you want, and then it&amp;rsquo;ll email you your schedule for the day. Sounds ideal.&lt;/p&gt;

&lt;p&gt;After wrestling with MailGun for awhile, &lt;a href=&#34;https://sendgrid.com/&#34;&gt;SendGrid&lt;/a&gt; won out in terms of simplicity. I had test emails out within minutes, and all I had to do then was write a little server code to compile the list, do some basic HTML formatting, and that&amp;rsquo;s one more feature to add to the list. I thought I was just doing this for myself, but I was instantly validated by this exchange:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bradorego.com/img/case-study/better-mcbw/lauren.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-fuuuuuuuuuture:608891990651e25035713577174171c1&#34;&gt;The Fuuuuuuuuuture&lt;/h1&gt;

&lt;p&gt;More than once already this week, people have brought up the idea of some sort of optimization algorithm. Each event has a start time, and end time, and a location. This sounds like some sort of modified Travelling Salesman Problem, and while that would be a lot of fun to try to implement, I think that&amp;rsquo;s a &amp;ldquo;next-year&amp;rdquo; type of feature. After all, I&amp;rsquo;ve already sunk a whopping ~20 hours into this project. I can only imagine what The Isthmus paid their developers and how much time they spent on this.&lt;/p&gt;

&lt;p&gt;The code could also use a serious refactor, especially on the client side. This is what happens when innovation/speed of development matters more than code quality/longevity/cost of support. Whoops.&lt;/p&gt;

&lt;p&gt;There also could be increased security, as right now I&amp;rsquo;m pretty sure if you have someone&amp;rsquo;s user ID you can modify their list of saved events, but again, 20 hours of free work plus it&amp;rsquo;s an app that&amp;rsquo;s only useful for one week (and for a beer event, no less).&lt;/p&gt;

&lt;h1 id=&#34;lessons-learned:608891990651e25035713577174171c1&#34;&gt;Lessons Learned&lt;/h1&gt;

&lt;h3 id=&#34;firebase-synchronized-arrays:608891990651e25035713577174171c1&#34;&gt;Firebase Synchronized Arrays&lt;/h3&gt;

&lt;p&gt;One thing I learned in trying to build this Saved Event feature is &lt;a href=&#34;https://www.firebase.com/docs/web/libraries/angular/guide/synchronized-arrays.html&#34;&gt;Firebase arrays&lt;/a&gt; don&amp;rsquo;t work the way you think they do. I had a list of events  (JSON objects) that I would push to an array (via &lt;code&gt;$firebaseArray.$add&lt;/code&gt;), and when someone unchecked the magic box, I tried to use &lt;code&gt;$firebaseArray.$remove&lt;/code&gt;, except that only works if you&amp;rsquo;re talking about the same reference you used to push to the array. So, if you have a list of items, you push &lt;em&gt;a copy&lt;/em&gt; of one to the array, then try to remove it, it didn&amp;rsquo;t work.&lt;/p&gt;

&lt;h3 id=&#34;keyed-arrays-make-sense-sometimes:608891990651e25035713577174171c1&#34;&gt;Keyed Arrays Make Sense Sometimes&lt;/h3&gt;

&lt;p&gt;As a corollary to the above realization, keyed arrays actually make a lot of sense sometimes. The solution to this problem (while not the most elegant/efficient solution) is to create a keyed array of saved events. Every time a user saves/unsaves an event, we update the user&amp;rsquo;s &lt;code&gt;saved&lt;/code&gt; array by updating the object at that key, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  profile.saved[event.id] = event;
  /// or
  delete profile.saved[event.id];
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;videos:608891990651e25035713577174171c1&#34;&gt;Videos&lt;/h1&gt;

&lt;h3 id=&#34;official-mcbw:608891990651e25035713577174171c1&#34;&gt;Official MCBW:&lt;/h3&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/s4OAGhlFpcQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;better-mcbw:608891990651e25035713577174171c1&#34;&gt;Better MCBW:&lt;/h3&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/yAJx1i41d04&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Back to Static</title>
      <link>https://bradorego.com/2016-04-back-to-static</link>
      <pubDate>Thu, 14 Apr 2016 12:26:53 -0500</pubDate>
      
      <guid>https://bradorego.com/2016-04-back-to-static</guid>
      <description>

&lt;p&gt;&lt;div class=&#34;tldnr&#34;&gt;
  &lt;h4&gt;TL;DNR&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Static generators (e.g. &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;) are pretty cool.&lt;/li&gt;
    &lt;li&gt;Ease of use/production directly relates to content creation.&lt;/li&gt;
    &lt;li&gt;It&amp;rsquo;s okay to borrow aesthetics/technologies/designs from others.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;hr/&gt;&lt;/p&gt;

&lt;p&gt;As you might be able to tell, my last blog post is from 2014. It was about time to get back on the blog horse but also give the site a little facelift. I&amp;rsquo;d &lt;a href=&#34;http://beerbatterbreakfast.com/2014/07/fancy-new-blog.html&#34;&gt;migrated blog platforms&lt;/a&gt; in the past, but never really took the time to think about how my own personal site was hosted. So let&amp;rsquo;s take a quick trip down memory lane.&lt;/p&gt;

&lt;h1 id=&#34;static-site-2011:713252246435f0d8330ff0c53c578039&#34;&gt;Static Site (2011)&lt;/h1&gt;

&lt;p&gt;When I first got into web development (professionally), I thought it&amp;rsquo;d be cool to build my own website from scratch to prove my mettle. That was 2011; certainly not far enough ago by any means for most of the technologies in use today to not exist. But, I was young and naive, and had some big ideas (e.g. a live CSS switcher, replicating the exact same look/behavior with and without Javascript, etc).&lt;/p&gt;

&lt;p&gt;I learned very quickly from that experience that keeping a static site up to date was really difficult. Any time you made a change one place, you had to make sure you made it everywhere. You had to make sure to manage collisions. You had to handle your own deploys and routing. It was a hassle, and I virtualy never updated the site, so after spending some time working with &lt;a href=&#34;https://zebradog.com&#34;&gt;ZebraDog&lt;/a&gt; and seeing the power of Drupal, I decided it was time for a change.&lt;/p&gt;

&lt;h1 id=&#34;drupal-7-0-2012:713252246435f0d8330ff0c53c578039&#34;&gt;Drupal 7.0 (2012)&lt;/h1&gt;

&lt;p&gt;So I set out to &lt;a href=&#34;https://bradorego.com/2012-11-new-site/&#34;&gt;update and re-design&lt;/a&gt; the website again, this time using something a little more powerful and modern, and to make it easier for me to create new content while still having full control and flexibility over how it&amp;rsquo;s displayed and what functionality the website had.&lt;/p&gt;

&lt;p&gt;After all, at ZD we&amp;rsquo;d built a lot of things on Drupal, ranging from fairly simple &lt;a href=&#34;http://www.kellerrealestategroup.com/&#34;&gt;real estate websites&lt;/a&gt; to fairly complicated &lt;a href=&#34;http://www.mstc.edu/&#34;&gt;institutional websites&lt;/a&gt; to the backbone of &lt;a href=&#34;https://www.youtube.com/watch?v=VuicjhSpbV8&#34;&gt;interactive multimedia installations&lt;/a&gt;. I could use it to build a measly blog and portfolio website, right?&lt;/p&gt;

&lt;p&gt;The problem wasn&amp;rsquo;t whether I could; in fact the problem was probably &lt;strong&gt;that&lt;/strong&gt; I could. I built an incredible media delivery site that was isolated from the world and almost too powerful for its own good. Developing and maintaining the site was nontrivial, and adding new content, while certainly easier than a static site, was beyond me.&lt;/p&gt;

&lt;h1 id=&#34;back-to-static-2016:713252246435f0d8330ff0c53c578039&#34;&gt;Back to Static (2016)&lt;/h1&gt;

&lt;p&gt;Blog technology philosophy has shifted lately. WordPress is still the clear winner in the space, but there&amp;rsquo;s an alternative to generating the site every time it&amp;rsquo;s requested. These take the form of static generators, and make a lot more sense to me personally. Jekyll, Ghost, Hugo, Hexo; the list goes on. What&amp;rsquo;s under the hood doesn&amp;rsquo;t really matter (which, as an aside, makes switching way easier) &amp;emdash; all that matters is the static HTML/CSS/JS they output.&lt;/p&gt;

&lt;p&gt;It seems a little weird to be going back to a static option, but there are some major differences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I have so much less to worry about in terms of upkeep and deploy thanks to things like partials and services like &lt;a href=&#34;https://www.aerobatic.com/&#34;&gt;Aerobatic&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Content creation is way easier because I literally create a file and start typing. Markdown gets translated into HTML and all of the formatting and styling is handled by the templates I define.&lt;/li&gt;
&lt;li&gt;I stand on the shoulders of giants &amp;emdash; there have been tons of people putting in tons of work to make things like this easier. There&amp;rsquo;s no reason to reinvent the wheel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So (and I&amp;rsquo;ve said this before), theoretically keeping the site updated will be a lot easier. I somewhat feel like a cop-out for using a fairly standard template/look-and-feel, but at the end of the day, my job as a designer isn&amp;rsquo;t to make things look pretty or to be unique. My job is to provide the best experience possible for my users. In the context of a blog, that means engaging, useful content; not pretty pictures.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Progressive Enhancement with Phonegap</title>
      <link>https://bradorego.com/2014-02-progressive-enhancement-with-phonegap</link>
      <pubDate>Thu, 20 Feb 2014 16:46:54 -0500</pubDate>
      
      <guid>https://bradorego.com/2014-02-progressive-enhancement-with-phonegap</guid>
      <description>

&lt;p&gt;&lt;div class=&#34;tldnr&#34;&gt;
  &lt;h4&gt;TL;DNR&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Enabling native-level functionality on a hosted web app is really cool.&lt;/li&gt;
    &lt;li&gt;Code reuse is also pretty cool.&lt;/li&gt;
    &lt;li&gt;Beware of the gotchas. There are always gotchas.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;hr/&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This blog post is the long-form answer to &lt;a href=&#34;http://stackoverflow.com/questions/20574938/progressive-enhancement-with-phonegap&#34;&gt;this StackOverflow post&lt;/a&gt; I made about it (which is, at the time of writing, the #1 Google result for &amp;ldquo;progressive enhancement phonegap&amp;rdquo;). Also worth noting this guide only addresses Android right now. Doing so for iOS should follow the same methodology though.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Github repo for this project can be found &lt;a href=&#34;https://github.com/borego/progressive_enhancement_phonegap&#34;&gt;here&lt;/a&gt;. You can download the app (for Android) &lt;a href=&#34;http://old.bradorego.com/sites/default/files/progenhpg/prog-enh-pg.apk&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re thinking about building a web app versus a native app, I&amp;rsquo;m here to tell you that the answer is almost definitely go for a web app. Web performance (especially on mobile devices) has come a long way in the past year or so, and using tools like &lt;a href=&#34;http://phonegap.com&#34;&gt;Phonegap&lt;/a&gt;, you can get the best of both worlds (something in the app store, code reuse, platform agnosticism, leveraging web technologies). Based on some recent work/research I&amp;rsquo;ve done, it&amp;rsquo;s actually much more powerful than they&amp;rsquo;re selling it for.&lt;/p&gt;

&lt;p&gt;This post will go into detail of how to make it work, but at a very high level, all you have to do is alter the User Agent coming out of your Phonegapped app, then sniff for that special UA string on the server side of wherever your web code is living, and if it&amp;rsquo;s there, enable Phonegap-specific code. If not, let it function as a normal web app - no harm, no foul. It&amp;rsquo;s an incredibly powerful tool that lets you use ~98% of the same code for your Android/iPhone app and your web app.&lt;/p&gt;

&lt;h1 id=&#34;step-0-set-up-your-phonegap-project-server-etc:b24c23782d00ece4bee8e2115b865429&#34;&gt;Step 0) Set up your Phonegap project, server, etc.&lt;/h1&gt;

&lt;p&gt;This guide won&amp;rsquo;t go into detail about how exactly to set up a phonegap application, or how to get started with Rails. I&amp;rsquo;ll leave that as an exercise to the reader, but also you can clone my &lt;a href=&#34;https://github.com/borego/progressive_enhancement_phonegap&#34;&gt;github repo&lt;/a&gt; which has all of that (and many other things) done for you. You&amp;rsquo;ll also need to, for the purpose of this demo, add the Contacts plugin to your Phonegap app.&lt;/p&gt;

&lt;h1 id=&#34;step-1-point-your-phonegap-app-at-your-web-app:b24c23782d00ece4bee8e2115b865429&#34;&gt;Step 1) Point your Phonegap app at your web app&lt;/h1&gt;

&lt;p&gt;This step seems a bit trivial, but it&amp;rsquo;s not part of the default Phonegap configuration. In your &lt;code&gt;www/config.xml&lt;/code&gt; file, add the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;content src=&amp;quot;http://your-site-name-here.com&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example repo, the path is replaced with &lt;code&gt;http://prog-enh-pg.herokuapp.com/&lt;/code&gt;, as that&amp;rsquo;s where the heroku app lives for the demo. I usually put it after the &lt;code&gt;&amp;lt;author&amp;gt;&lt;/code&gt; tag as well, but I don&amp;rsquo;t think that&amp;rsquo;s required.&lt;/p&gt;

&lt;h1 id=&#34;step-2-modify-the-user-agent-coming-out-of-your-pg-app:b24c23782d00ece4bee8e2115b865429&#34;&gt;Step 2) Modify the User Agent coming out of your PG app&lt;/h1&gt;

&lt;p&gt;This is basically the only part that&amp;rsquo;s platform-specific. Obviously the way you do this on Android is going to differ from the way you do it on iOS. This guide only details the Android one, but it would be just as easy to do in iOS (or Windows Phone).&lt;/p&gt;

&lt;p&gt;Navigate down to &lt;code&gt;platforms/android/src/path/to/your/app/ProjectName.java&lt;/code&gt; and edit the onCreate function to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void onCreate(Bundle savedInstanceState)
{
    super.onCreate(savedInstanceState);
    super.init();
    // Set by &amp;lt;content src=&amp;quot;index.html&amp;quot;&amp;gt; in config.xml
    super.loadUrl(Config.getStartUrl());

    ////// This is what you edit //////
    String ua = this.appView.getSettings().getUserAgentString();
    this.appView.getSettings().setUserAgentString(ua + &amp;quot; phonegap_prog_enh&amp;quot;);
    //super.loadUrl(&amp;quot;file:///android_asset/www/index.html&amp;quot;);
    ////// This is what you edit //////
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The bold text is what you&amp;rsquo;re adding. All this does is append a custom string (in this case, &lt;code&gt;&amp;quot;phonegap_prog_enh&amp;quot;&lt;/code&gt;) to the User Agent so that you can determine on the server side whether or not a use is on your app or not. Yes, of course, someone could probably proxy this and sniff it out, or reverse engineer it, but it doesn&amp;rsquo;t matter - all it would do is break the app in their browser. Trollers gonna troll.&lt;/p&gt;

&lt;h1 id=&#34;step-3-listen-for-your-custom-user-agent-on-the-server-side-and-set-a-flag:b24c23782d00ece4bee8e2115b865429&#34;&gt;Step 3) Listen for your custom User Agent on the server side and set a flag&lt;/h1&gt;

&lt;p&gt;Now that we have a way to know if a user is accessing our server via a normal browser or via our Phonegap app, we can decide whether or not to enable Phonegap-specific features. You need to do this because if you don&amp;rsquo;t, you get some &lt;a href=&#34;https://bradorego.com/img/posts/prog-enh-phonegap/uglypg.png&#34;&gt;ugly error messages&lt;/a&gt; as the web app tries to access Phonegap APIs that aren&amp;rsquo;t there. This detection is really easy, though. In the sample app, it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ContactsController &amp;lt; ApplicationController
  def index
    @phonegap = request.env[&#39;HTTP_USER_AGENT&#39;].include?(&amp;quot;phonegap_prog_enh&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which then falls through to the view, where we can do stuff like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;% if @phonegap %&amp;gt;
  &amp;lt;h3&amp;gt;Only Phonegap users will see this&amp;lt;/h3&amp;gt;
  ... 
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;re only going to want the Phonegap Javascript to fire in these instances, which leads us to the next part.&lt;/p&gt;

&lt;h1 id=&#34;step-4-enable-phonegap-specific-functionality:b24c23782d00ece4bee8e2115b865429&#34;&gt;Step 4) Enable Phonegap-specific functionality&lt;/h1&gt;

&lt;p&gt;As mentioned above, you&amp;rsquo;re not going to want the Phonegap code to run willy-nilly all over your application. Specifically, the &lt;code&gt;cordova.js&lt;/code&gt; file (which normally lives in your Phonegap&amp;rsquo;s &lt;code&gt;platforms/android/assets/www&lt;/code&gt; folder) is what kicks off all of the Phonegap functionality, so once you load that, you&amp;rsquo;re going down that path. Luckily, this is easily avoided:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;% if @phonegap %&amp;gt;
  &amp;lt;script src=&amp;quot;/cordova.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    // your PG-specific code here
  &amp;lt;/script&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously you don&amp;rsquo;t need to inline your PG Javascript, but you do need to protect against &lt;code&gt;cordova.js&lt;/code&gt; loading out of place.&lt;/p&gt;

&lt;h1 id=&#34;step-5-profit:b24c23782d00ece4bee8e2115b865429&#34;&gt;Step 5) Profit&lt;/h1&gt;

&lt;p&gt;That&amp;rsquo;s pretty much it. Obviously there&amp;rsquo;s a lot more to it when it comes to the actual Phonegap APIs, but there&amp;rsquo;s a lot of support and writing about all of that. The point of this guide is just to lay out this methodology, and to further prove my belief that the vast majority of app development can be done with &amp;ldquo;hybrid&amp;rdquo; apps.&lt;/p&gt;

&lt;h1 id=&#34;gotchas:b24c23782d00ece4bee8e2115b865429&#34;&gt;Gotchas&lt;/h1&gt;

&lt;p&gt;We all know it wouldn&amp;rsquo;t be a real tech article without some gotchas, so here are some things that tripped me up the first few times.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need to listen for both the DOM to be ready and the Phonegap APIs to be ready. This takes the form of &lt;code&gt;&#39;DOMContentLoaded&#39;&lt;/code&gt; and &lt;code&gt;&#39;deviceready&#39;&lt;/code&gt; event listeners. It&amp;rsquo;s as easy as setting a flag in each that you can reference later when trying to run your PG code. You can also just check if the &lt;code&gt;navigator.[insert-plugin-name]&lt;/code&gt; exists yet (probably safer).&lt;/li&gt;
&lt;li&gt;You need to put &lt;code&gt;cordova.js&lt;/code&gt;, &lt;code&gt;cordova_plugins.js&lt;/code&gt;, and the &lt;code&gt;/plugins&lt;/code&gt; directory in the right place on your server. You should be able to do it from a relative path based on where you access &lt;code&gt;cordova.js&lt;/code&gt;, but for the purpose of this demo, everything is in the &lt;code&gt;/public&lt;/code&gt; folder for Rails.&lt;/li&gt;
&lt;li&gt;Any time you add or remove a plugin via Phonegap&amp;rsquo;s CLI, you need to go back and update at least the &lt;code&gt;cordova_plugins.js&lt;/code&gt; file that&amp;rsquo;s on your server. Not doing so will either produce some funky errors (as it tries to look for a plugin that doesn&amp;rsquo;t exist), or it won&amp;rsquo;t give you access to the APIs you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to shoot an email, tweet, or reach out to me any other way with questions, feedback, etc. Thanks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Foursquare Heatmap &amp; Remote Sensing</title>
      <link>https://bradorego.com/2013-03-foursquare-heatmap--remote-sensing</link>
      <pubDate>Mon, 11 Mar 2013 17:21:36 -0500</pubDate>
      
      <guid>https://bradorego.com/2013-03-foursquare-heatmap--remote-sensing</guid>
      <description>

&lt;p&gt;&lt;div class=&#34;tldnr&#34;&gt;
  &lt;h4&gt;TL;DNR&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Foursquare&amp;rsquo;s API and Google Maps are pretty easy to work with.&lt;/li&gt;
    &lt;li&gt;Creating a new product can be as easy as combining two existing technologies.&lt;/li&gt;
    &lt;li&gt;New products create opportunities for new experiences.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;hr/&gt;&lt;/p&gt;

&lt;p&gt;A little over a month ago (technically during the &lt;a href=&#34;https://www.hackerleague.org/hackathons/foursquare-hackathon-2013&#34;&gt;Foursquare Hackathon&lt;/a&gt;, but I was working from home due to &lt;a href=&#34;http://midwestultimate.com/red-eye&#34;&gt;Red Eye&lt;/a&gt;) I spent a few hours one weekend hacking together an idea I&amp;rsquo;d come up with when working on Foursquare integration for &lt;a href=&#34;http://gettrinker.com&#34;&gt;Trinker&lt;/a&gt;. What I discovered while playing with the &lt;a href=&#34;https://developer.foursquare.com/overview/venues&#34;&gt;Venues API&lt;/a&gt; is that with one query, you can get all of the information about a bunch of different venues (I think it tops out at 30). Part of that information is, of course, the location (latitude, longitude, address), and another interesting data point: the &lt;code&gt;hereNow&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;What that means is that with a single query to the Foursquare API, I essentially have a list of locations and how many people are checked in at that location right now. Interesting, I thought. So then I thought, why don&amp;rsquo;t I take this information and create an overlay in Google Maps? A heat map, if you will? Well, the idea sat around for a month or two, and when I caught wind of the Foursquare Hackathon thanks to &lt;a href=&#34;http://snowshoestamp.com&#34;&gt;Snowshoe&lt;/a&gt;, I decided it was time to dust that one off.&lt;/p&gt;

&lt;h1 id=&#34;the-technical-details:8c66a7351b15f2ef68d2e9b9363a058c&#34;&gt;The technical details&lt;/h1&gt;

&lt;p&gt;The app is written entirely in Javascript (there&amp;rsquo;s no server-side code behind this - no database), and uses Foursquare&amp;rsquo;s API and Google&amp;rsquo;s Maps API. I first try to capture the user&amp;rsquo;s geolocation data (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Using_geolocation&#34;&gt;navigator.geolocation&lt;/a&gt;) so I can display a map that&amp;rsquo;s immediately relevant to them. If that fails (or they deny), I default to NYC (as it almost always has data to show). Users can also enter an address or location which I then run through Google&amp;rsquo;s &lt;a href=&#34;https://developers.google.com/maps/documentation/geocoding/&#34;&gt;Geocoder API&lt;/a&gt; and pull out the lat/lng which go on to the 4sq/gMaps functions. Once I have a lat/lng, I make an AJAX call to Foursquare with credentials (&lt;code&gt;client_id&lt;/code&gt;, &lt;code&gt;client_secret&lt;/code&gt;, &lt;code&gt;version #&lt;/code&gt;) and the data to make the query (&lt;code&gt;radius&lt;/code&gt;, &lt;code&gt;lat&lt;/code&gt;/&lt;code&gt;lng&lt;/code&gt;, &lt;code&gt;category&lt;/code&gt;, etc). The return from that gives me the &lt;a href=&#34;https://developer.foursquare.com/docs/explore#req=venues/search%3Fll%3D40.7,-74&#34;&gt;venues list&lt;/a&gt; (&lt;code&gt;data.response.venues&lt;/code&gt;), which I save off into a local variable for later (&lt;code&gt;venueList&lt;/code&gt;). Once I have all the data, I initialize a &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/reference#Map&#34;&gt;&lt;code&gt;google.maps.Map&lt;/code&gt; object&lt;/a&gt; (with some &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/reference#MapOptions&#34;&gt;options&lt;/a&gt;), and then iterate through each of the venues, drawing a &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/reference#Circle&#34;&gt;circle&lt;/a&gt; with radius and color based on the &lt;code&gt;hereNow&lt;/code&gt; value of that venue. Once the circle is drawn to the map (which is kind of weird - you actually create a new circle with a reference to the map object), I add a &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/events&#34;&gt;click listener&lt;/a&gt; to display the venue information, and then I add them to the table below which I then run through &lt;a href=&#34;http://tablesorter.com/docs/&#34;&gt;tablesorter&lt;/a&gt;. When you click on one of the table rows, I grab the lat/lng from that row and search through the list of venues (&lt;code&gt;venueList&lt;/code&gt;) to find the one that matches and open up an &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/reference#InfoWindow&#34;&gt;info window&lt;/a&gt; to display its content. Voila.&lt;/p&gt;

&lt;p&gt;Whew, okay. That was a mouthful. For the non-tech folk, basically all I&amp;rsquo;m doing is getting the latitude and longitude of your current location (or what you type in), querying Foursquare, pulling out the info, and putting circles onto Google Maps based on how many people are at the locations, which you can then click on to get more info. You can also sort the table below, and click on any row to see that location on the map.&lt;/p&gt;

&lt;h1 id=&#34;but-why-brad:8c66a7351b15f2ef68d2e9b9363a058c&#34;&gt;But why, Brad?&lt;/h1&gt;

&lt;p&gt;Because it&amp;rsquo;s cool. That&amp;rsquo;s actually the first motivation. I had the idea and I wanted to see if I could pull it off. It turns out I could, and it only took me a few hours to get the base prototype working. I thought it&amp;rsquo;d be interesting to literally see where people are. That is, in essence, what this is. I&amp;rsquo;ve created an interactive information visualization of where people are, according to Foursquare. And it&amp;rsquo;s really cool. I&amp;rsquo;ve also made a few &lt;a href=&#34;http://www.youtube.com/playlist?list=PLq3M6ODce1N6IZoXoisCw5WHjEQs7SAWl&amp;amp;feature=view_all&#34;&gt;time lapse videos&lt;/a&gt; to show how cool it can be.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also noticed something else, though, since making this. Every now and then, I get curious to see what the map looks like. I&amp;rsquo;m curious to see what people are doing in places I&amp;rsquo;m not. I now have a tool that lets me see this, and the fact that there are real people out there making these things happen is a pretty interesting experience. When I have friends on vacation, or travelling to different cities, I jokingly tell them I&amp;rsquo;ll be watching them.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a practical use to this technology, which is part of the motivation behind building it - I can see where people are/aren&amp;rsquo;t in my immediate vicinity. If I&amp;rsquo;m planning to go out to the bars, or out to a restaurant, and I see there are a lot of people in a certain area, maybe I&amp;rsquo;ll want to avoid there (or to go there).&lt;/p&gt;

&lt;p&gt;At the very least, it&amp;rsquo;s fun to play with!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zebradog</title>
      <link>https://bradorego.com/2013-03-zebradog</link>
      <pubDate>Fri, 01 Mar 2013 15:10:22 -0500</pubDate>
      
      <guid>https://bradorego.com/2013-03-zebradog</guid>
      <description>

&lt;h1 id=&#34;about:58aa00a3f9ec4cc7a62166ecd695ef26&#34;&gt;About&lt;/h1&gt;

&lt;p&gt;Zebradog is an environmental graphic design firm located in Madison, WI who specializes in creating immersive, branded experiences for their clients. Zebradog&amp;rsquo;s multidisciplinary team of architects, graphic designers, and software developers blend the physical and digital realms, creating novel digital applications of technology for interactive multimedia and website design.&lt;/p&gt;

&lt;p&gt;Working with Zebradog gave me the opportunity to work with an extremely talented team as well as push the limits of  web technology in the interactive multimedia space. During my time at Zebradog, we made the decision to move away from the technology the company had previously used (Quartz Composer) and toward embracing the developing world of web technology, which lead us to experiment with a lot of new technology, such as Three.js (for WebGL), Zigfu (for Kinect), and many Javascript touch libraries.&lt;/p&gt;

&lt;p&gt;The other branch of Zebradog&amp;rsquo;s Digital Team built beautiful, well-structured, and  highly usable websites for clients. Built mainly on Drupal, ZD&amp;rsquo;s sites traditionally had not been responsive or mobile-friendly, which is another point I stressed while working with ZD. Mid-State Technical College serves as an example of the first mobile-first design project Zebradog completed.&lt;/p&gt;

&lt;p&gt;Videos can be found on &lt;a href=&#34;http://vimeo.com/zebradog&#34;&gt;Zebradog&amp;rsquo;s Vimeo page&lt;/a&gt;, and &lt;a href=&#34;http://demo.zebradog.com&#34;&gt;Zebradog&amp;rsquo;s Demo page&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;selected-images:58aa00a3f9ec4cc7a62166ecd695ef26&#34;&gt;Selected Images&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://bradorego.com/img/case-study/zebradog/storystation.png&#34; /&gt;
&lt;img src=&#34;https://bradorego.com/img/case-study/zebradog/hometownheroes.png&#34; /&gt;
&lt;img src=&#34;https://bradorego.com/img/case-study/zebradog/aramco.png&#34; /&gt;
&lt;img src=&#34;https://bradorego.com/img/case-study/zebradog/nw.png&#34; /&gt;
&lt;img src=&#34;https://bradorego.com/img/case-study/zebradog/northwestern.png&#34; /&gt;
&lt;img src=&#34;https://bradorego.com/img/case-study/zebradog/mstc-desktop.png&#34; /&gt;
&lt;img src=&#34;https://bradorego.com/img/case-study/zebradog/mstc-tablet.png&#34; /&gt;
&lt;img src=&#34;https://bradorego.com/img/case-study/zebradog/mstc-phone.png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Site!</title>
      <link>https://bradorego.com/2012-11-new-site</link>
      <pubDate>Fri, 23 Nov 2012 17:32:13 -0500</pubDate>
      
      <guid>https://bradorego.com/2012-11-new-site</guid>
      <description>&lt;p&gt;&lt;div class=&#34;tldnr&#34;&gt;
  &lt;h4&gt;TL;DNR&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Drupal is cool, powerful, mature.&lt;/li&gt;
    &lt;li&gt;Making it easier to create content is important to how likely it is to happen.&lt;/li&gt;
    &lt;li&gt;Keeping up with technology and the design community is important.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;hr/&gt;&lt;/p&gt;

&lt;p&gt;It only took me about 10 months, but I&amp;rsquo;ve finally gotten around to rebuilding this site to have a purpose. I originally built a personal website when I was leaving Epic with the intention of having a place to show my past work as well as a place to play around with new technologies on the web. That was, at least, the intention. If any of you were keeping tabs on it, that never actually happened. I built the site haphazardly over the course of a few days and never updated it.&lt;/p&gt;

&lt;p&gt;This time around, though, it&amp;rsquo;ll be different. Two main reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I built the site on top of Drupal this time around instead of doing everything by hand. This means I&amp;rsquo;m not trying to be a whizkid web developer anymore (read: more professional) and it also means updating things is a lot easier/less painful.&lt;/li&gt;
&lt;li&gt;I have a reason and method of keeping it up to date. If I&amp;rsquo;m blogging about usability/user experience, it&amp;rsquo;s an excuse to keep on top of things, and to keep it fresh. Plus, if I want to be a consultant, I&amp;rsquo;ve gotta show my stuff somehow, right?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I do have to give a fair bit of credit to my &lt;a href=&#34;https://zebradog.com&#34;&gt;ZD&lt;/a&gt; family for both inspiring me and giving me some experience building sites from scratch on top of Drupal. I wouldn&amp;rsquo;t be where I am today (both in terms of skills and motivation) if not for them, and I&amp;rsquo;m looking forward to each new day with ZD.&lt;/p&gt;

&lt;p&gt;I have a few ideas of blog post themes/threads (Design in the Wild, War Stories, etc.), but this blog will also likely be a mixture of professional, personal, and possibly-insane. It&amp;rsquo;ll be fun to work on it, see it grow, populate my portfolio, etc.&lt;/p&gt;

&lt;p&gt;Onward and upward.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>